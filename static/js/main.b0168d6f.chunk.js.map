{"version":3,"sources":["components/DataGridRow.js","components/DataGridBody.js","components/DataGridHeaderSortSign.js","components/DataGridHeader.js","components/DataGridPager.js","components/DataGrid.js","components/UserDetails.js","components/ChangeData.js","App.js","index.js"],"names":["DataGridRow","row","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","this","props","columns","Symbol","iterator","next","done","column","value","formatter","rowData","push","react_default","a","createElement","key","err","return","onClick","Component","DataGridBody","_this","rows","_loop","DataGridRow_DataGridRow","id","onActiveRowChanged","data","DataGridHeaderSortSign","className","direction","DataGridHeader","onSortChange","label","sortButton","sortColumn","DataGridHeaderSortSign_DataGridHeaderSortSign","sortDirection","_onSortButtonClick","DataGridPager","onCurrentPageChanged","currentPage","pagesCount","pagesBeforeCount","Math","min","pagesBefore","i","page","type","pagesAfterCount","pagesAfter","_loop2","_goFirst","_goBack","_goForward","ley","_goLast","filterDataMemoized","memoize","searchString","slice","filter","item","searchStringLower","toLowerCase","toString","includes","sortDataMemoized","sort","b","valueA","valueB","DataGrid","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sortParams","setState","newPage","newActiveRow","_this2","filteredData","filteredAndSortedData","filteredAndSorteredAndPaged","ceil","length","DataGridPager_DataGridPager","p","_onCurrentPageChanged","DataGridHeader_DataGridHeader","e","_onSortChange","DataGridBody_DataGridBody","r","_onActiveRowChanged","UserDetails","user","firstName","lastName","description","address","streetAddress","city","zip","ChangeData","name","defaultChecked","onChange","onDataChange","App","users","data1","activeUser","email","phone","document","querySelector","setAttribute","console","log","currentTarget","newUser","data2","loadData","userDetails","UserDetails_UserDetails","onInput","_onSearchFieldInput","ChangeData_ChangeData","_onDataChange","DataGrid_DataGrid","_onActiveUserChanged","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.b0168d6f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass DataGridRow extends Component {\r\n    render() {\r\n        const row = [];\r\n        for (const column of this.props.columns) {\r\n            const value = column.formatter(this.props.rowData);\r\n            row.push(<td key={column.key}>{value}</td>);\r\n        }\r\n        return (<tr onClick={this.props.onClick}>{row}</tr>);\r\n    }\r\n}\r\n\r\nexport {DataGridRow};","import React, {Component} from 'react';\r\nimport {DataGridRow} from './DataGridRow.js';\r\n\r\nclass DataGridBody extends Component {\r\n    render() {\r\n        const rows = [];\r\n\r\n        for (const rowData of this.props.data) {\r\n            rows.push(<DataGridRow key={rowData.id}\r\n                                   rowData={rowData}\r\n                                   columns={this.props.columns}\r\n                                   onClick={() => this.props.onActiveRowChanged(rowData)}/>);\r\n        }\r\n        return (\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        )\r\n    }\r\n}\r\n\r\nexport {DataGridBody};","import React, {Component} from 'react';\r\n\r\nclass DataGridHeaderSortSign extends Component {\r\n    render() {\r\n        const className = this.props.direction === 'up' ?\r\n            'glyphicon glyphicon-triangle-top' :\r\n            'glyphicon glyphicon-triangle-bottom';\r\n        return (<span className={className}></span>)\r\n    }\r\n}\r\n\r\nexport {DataGridHeaderSortSign};","import React, {Component} from 'react';\r\nimport {DataGridHeaderSortSign} from \"./DataGridHeaderSortSign\";\r\n\r\nclass DataGridHeader extends Component {\r\n    _onSortButtonClick(column) {\r\n        this.props.onSortChange({\r\n            column: column\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const row = [];\r\n        for (const column of this.props.columns) {\r\n            const value = column.label;\r\n            const sortButton = this.props.sortColumn===column?\r\n                <DataGridHeaderSortSign direction={this.props.sortDirection? 'up' : 'down'}/> :\r\n                '';\r\n            row.push(\r\n                <th key={column.key}\r\n                    className={column.key}\r\n                    onClick={() => this._onSortButtonClick(column)}>\r\n                    {value}\r\n                    {sortButton}\r\n                </th>);\r\n        }\r\n        return (<thead><tr>{row}</tr></thead>);\r\n    }\r\n}\r\n\r\nexport {DataGridHeader};","import React, {Component} from 'react';\r\n\r\nclass DataGridPager extends Component {\r\n    _goFirst() {\r\n        this.props.onCurrentPageChanged(0);\r\n    }\r\n\r\n    _goBack() {\r\n        const currentPage = this.props.currentPage;\r\n        if (currentPage === 0) {\r\n            return\r\n        }\r\n        this.props.onCurrentPageChanged(currentPage - 1);\r\n    }\r\n\r\n    _goForward() {\r\n        const currentPage = this.props.currentPage;\r\n        if (currentPage === this.props.pagesCount - 1) {\r\n            return\r\n        }\r\n        this.props.onCurrentPageChanged(currentPage + 1);\r\n    }\r\n\r\n    _goLast() {\r\n        this.props.onCurrentPageChanged(this.props.pagesCount - 1);\r\n    }\r\n\r\n    render() {\r\n        const currentPage = this.props.currentPage;\r\n        const pagesCount = this.props.pagesCount;\r\n\r\n        const pagesBeforeCount = Math.min(\r\n            currentPage,\r\n            2 + (2 - Math.min(2, pagesCount - currentPage - 1)));\r\n        const pagesBefore = [];\r\n        for (let i = pagesBeforeCount; i > 0 ; i--) {\r\n            const page = currentPage - i;\r\n            pagesBefore.push(\r\n                <button key={page}\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this.props.onCurrentPageChanged(page)}>\r\n                    {page+1}\r\n                </button>);\r\n        }\r\n\r\n        const pagesAfterCount = Math.min(\r\n            pagesCount - currentPage - 1,\r\n            2 + (2 - Math.min(2, currentPage)));\r\n        const pagesAfter = [];\r\n        for (let i = 1; i <= pagesAfterCount ; i++) {\r\n            const page = currentPage + i;\r\n            pagesAfter.push(\r\n                <button key={page}\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this.props.onCurrentPageChanged(page)}>\r\n                    {page+1}\r\n                </button>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <button key=\"first\"\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this._goFirst()}>Первая</button>\r\n                <button key=\"prev\"\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this._goBack()}>Влево</button>\r\n                {pagesBefore}\r\n                <button key=\"current\"\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary\">{currentPage+1}</button>\r\n                {pagesAfter}\r\n                <button key=\"next\"\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this._goForward()}>Вправо</button>\r\n                <button ley=\"last\"\r\n                        type=\"button\"\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => this._goLast()}>Последняя</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {DataGridPager};","import memoize from 'memoize-one';\r\nimport React, {Component} from 'react';\r\nimport {DataGridBody} from './DataGridBody.js';\r\nimport {DataGridHeader} from './DataGridHeader.js';\r\nimport {DataGridPager} from './DataGridPager.js';\r\n\r\nconst MAX_ROWS = 5;\r\n\r\nfunction filterData(data, columns, searchString) {\r\n    return !searchString ?\r\n        data :\r\n        data.slice().filter(item => {\r\n            const searchStringLower = searchString.toLowerCase();\r\n            for (const column of columns) {\r\n                const columnForFilter = column.formatter(item).toString().toLowerCase();\r\n                if (columnForFilter.includes(searchStringLower)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n}\r\n\r\nconst filterDataMemoized = memoize(filterData);\r\n\r\nfunction sortData(data, sortColumn, sortDirection) {\r\n    return !sortColumn ?\r\n        data :\r\n        data.slice().sort((a, b) => {\r\n            const valueA = sortColumn.formatter(a);\r\n            const valueB = sortColumn.formatter(b);\r\n            return valueA === valueB ?\r\n                0 :\r\n                ((valueA > valueB ? 1 : -1) * (sortDirection ? 1 : -1));\r\n        });\r\n}\r\n\r\nconst sortDataMemoized = memoize(sortData);\r\n\r\nclass DataGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentPage: 0,\r\n            sortColumn: null,\r\n            sortDirection: true,\r\n        }\r\n    }\r\n\r\n    _onSortChange(sortParams) {\r\n        const column = sortParams.column;\r\n        if (this.state.sortColumn === column) {\r\n            this.setState({\r\n                sortDirection: !this.state.sortDirection,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                sortColumn: column,\r\n                sortDirection: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    _onCurrentPageChanged(newPage) {\r\n        this.setState({\r\n            currentPage: newPage,\r\n        });\r\n\r\n    }\r\n\r\n    _onActiveRowChanged(newActiveRow) {\r\n        if (!this.props.onActiveRowChanged) {\r\n            return;\r\n        }\r\n        this.props.onActiveRowChanged(newActiveRow);\r\n    }\r\n\r\n    render() {\r\n        const filteredData = filterDataMemoized(\r\n            this.props.data,\r\n            this.props.columns,\r\n            this.props.searchString);\r\n        const filteredAndSortedData = sortDataMemoized(\r\n            filteredData,\r\n            this.state.sortColumn,\r\n            this.state.sortDirection);\r\n        const filteredAndSorteredAndPaged = filteredAndSortedData.slice(\r\n            MAX_ROWS * this.state.currentPage,\r\n            MAX_ROWS * (this.state.currentPage + 1));\r\n        const pagesCount = Math.ceil(filteredAndSortedData.length / MAX_ROWS);\r\n        return (\r\n            <div>\r\n                <DataGridPager onCurrentPageChanged={p => this._onCurrentPageChanged(p)}\r\n                               pagesCount={pagesCount}\r\n                               currentPage={this.state.currentPage}/>\r\n                <table className='table-striped table-bordered'>\r\n                    <DataGridHeader columns={this.props.columns}\r\n                                    sortColumn={this.state.sortColumn}\r\n                                    sortDirection={this.state.sortDirection}\r\n                                    onSortChange={e => this._onSortChange(e)}/>\r\n                    <DataGridBody data={filteredAndSorteredAndPaged}\r\n                                  columns={this.props.columns}\r\n                                  onActiveRowChanged={r => this._onActiveRowChanged(r)}/>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {DataGrid};","import React, {Component} from 'react';\r\n\r\nclass UserDetails extends Component {\r\n    render() {\r\n        const user = this.props.user;\r\n\r\n        return (\r\n            <div>\r\n                <div>Выбран пользователь <b>{user.firstName} {user.lastName} </b></div>\r\n                <div>Описание:\r\n                    <br/>\r\n                    <div >{user.description}</div>\r\n                </div>\r\n                <div>Адрес проживания: <b>{user.address.streetAddress}</b></div>\r\n                <div>Город <b>{user.address.city} </b></div>\r\n                <div>Провинция/штат <b>{user.address.state} </b></div>\r\n                <div>Индекс <b>{user.address.zip} </b></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {UserDetails};\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass ChangeData extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n            >\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\"\r\n                                   name=\"optionsRadios\"\r\n                                   id=\"optionsRadios1\"\r\n                                   value=\"option1\"\r\n                                   defaultChecked = {true}\r\n                                   onChange={this.props.onDataChange}\r\n                                   ></input>\r\n                            <b>Маленький объем данных</b>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"radio disabled\">\r\n                        <label>\r\n                            <input type=\"radio\"\r\n                                   name=\"optionsRadios\"\r\n                                   id=\"optionsRadios2\"\r\n                                   value=\"option2\"\r\n                                   onChange={this.props.onDataChange}\r\n                                   ></input>\r\n                            <b>Большой объем данных</b>\r\n\r\n                        </label>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {ChangeData};","import React, {Component} from 'react';\r\nimport {DataGrid} from './components/DataGrid.js';\r\nimport {UserDetails} from './components/UserDetails.js';\r\nimport {ChangeData} from \"./components/ChangeData\";\r\nimport data1 from './data/packageSmall';\r\nimport data2 from './data/packageBig';\r\n\r\n// импортируем данные для загрузки\r\n// const DATA_URL1 = 'http://www.filltext.com/?rows=32&id={number|10000000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n// const DATA_URL2 = 'http://www.filltext.com/?rows=1000&id={number|100000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\r\n\r\n// Файлы для тестирование оффлайн\r\n// const DATA_URL1 = './data/packageSmall.json';\r\n// const DATA_URL2 = './data/packageBig.json';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const users = data1;\r\n        const columns = [\r\n            {key: 'id', label: 'Id', formatter: row => row.id},\r\n            {key: 'firstName', label: 'First name', formatter: row => row.firstName},\r\n            {key: 'lastName', label: 'Last name', formatter: row => row.lastName},\r\n            {key: 'email', label: 'E-mail', formatter: row => row.email},\r\n            {key: 'phone', label: 'Phone', formatter: row => row.phone},\r\n            {\r\n                key: 'address',\r\n                label: 'Address',\r\n                formatter: row => row.address.state + ', ' +\r\n                    row.address.city + ', ' +\r\n                    row.address.streetAddress + ', ' +\r\n                    row.address.zip\r\n            },\r\n            {key: 'description', label: 'Description', formatter: row => row.description},\r\n        ];\r\n\r\n        this.state = {\r\n            activeUser: null,\r\n            users: users,\r\n            columns: columns,\r\n        };\r\n    }\r\n\r\n\r\n    loadData(data) {\r\n        //Загружаем данные по ссылке\r\n        if(!data){\r\n            //Если ссылку не передали, берем ссылку из свойств\r\n            data=this.state.users;\r\n        }\r\n        //Включаем индикатор загрузки\r\n        document.querySelector(\"body\").setAttribute('class','load');\r\n        // Загружаем данные\r\n        console.log('работает');\r\n\r\n        // load(url).then(response => {\r\n            this.setState({\r\n                users: data,\r\n            });\r\n            // Выкоючаем индикатор загрузки\r\n            document.querySelector(\"body\").setAttribute('class','');\r\n\r\n        // });\r\n    }\r\n\r\n    _onSearchFieldInput(e) {\r\n        //Устанавливаем искомую строку\r\n        this.setState({\r\n            searchString: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    _onActiveUserChanged(newUser){\r\n        //Устанавливаем выбранную строку\r\n        this.setState({\r\n            activeUser: newUser,\r\n        });\r\n    }\r\n\r\n    _onDataChange(){\r\n        //Выбираем другой набор данных и подгружаем его\r\n        if (this.state.data===data1){\r\n            this.setState({\r\n                data: data2,\r\n            });\r\n            this.loadData(data2);\r\n\r\n        }else{\r\n            this.setState({\r\n                data: data1,\r\n            });\r\n            this.loadData(data1);\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const userDetails = this.state.activeUser ?\r\n            <UserDetails user={this.state.activeUser}/> :\r\n            'Выберите пользователя';\r\n        return (\r\n            <div className=\"App\">\r\n                <p>Гукетлева Дарья. Таблица на React</p>\r\n                <label>\r\n                    Поиск\r\n                    <input type=\"text\" name='Поиск' onInput={e => this._onSearchFieldInput(e)}/>\r\n                </label>\r\n                <ChangeData onDataChange={e=> this._onDataChange(e)}></ChangeData>\r\n                <DataGrid data={this.state.users}\r\n                          searchString={this.state.searchString}\r\n                          columns={this.state.columns}\r\n                          onActiveRowChanged={user=>this._onActiveUserChanged(user)}/>\r\n                {userDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}